C++:
Give a correct  (an energy-efficient) C++ solution for the following problem using this structure:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       
    }
};

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
 
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]


Haskell:
Give a correct (an energy-efficient) Haskell solution for the following problem using this structure:
-- Function to find two indices that sum up to the target
twoSum :: [Int] -> Int -> (Int, Int)
-- Main function for testing
main :: IO ()
main = do
-- Test cases
let nums = [2,7,11,15]
let target = 9
let result = twoSum nums target
putStrLn $ show result 
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
